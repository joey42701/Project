require  './End.rb'
require  './Default.rb'
require'./Intro.rb'
require'./Route1.rb'
require'./Route2.rb'







class Scene
   def enter()
     puts "This scene is not yet configured. Subclass it and implement enter()."
     exit(1)
   end
 end
 
 class Engine
 
   def initialize(scene_map)
     @scene_map = scene_map
   end
 
   def play()
     current_scene = @scene_map.opening_scene()
     last_scene = @scene_map.next_scene('finished')
 
     while current_scene != last_scene
       next_scene_name = current_scene.enter()
       current_scene = @scene_map.next_scene(next_scene_name)
     end
 
     # be sure to print out the last scene
     current_scene.enter()
   end
 end
 
 class Engine
 
  def initialize(scene_map)
     @scene_map = scene_map
   end
 
   def play()
     current_scene = @scene_map.opening_scene()
     last_scene = @scene_map.next_scene('finished')
 
     while current_scene != last_scene
       next_scene_name = current_scene.enter()
       current_scene = @scene_map.next_scene(next_scene_name)
     end
 
    # be sure to print out the last scene
    current_scene.enter()
   end
 end
 
 class Gameover < Scene
 
   @@quips = [
     "Nice job. You failed harder than I thought you would",
         "You're really bad at this. Like really bad",
         "Just click that x at the top right. Yeah that one"
   ]
 
   def enter()
     puts @@quips[rand(0..(@@quips.length - 1))]
     exit(1)
   end
 end
 
 
  class Map
   @@scenes = {
      'detention' => Detention.new(),
         'escape' => Escape.new(),
         'gameover' => Gameover.new(),
         'doors' => Doors.new(),
         'hallway1' => Hallway1.new(),
         'lockedroom' => Lockedroom.new(),
         'alfanso' => Alfanso.new(),
         'alinterr' => Alinterr.new(),
         'headmaster' => Headmaster.new(),
         'outsmart' => Outsmart.new(),
         'lit' => Lit.new(),
         'alac' => Alac.new(),
         'chase' => Chase.new(),
         'fight' => Fight.new(),
         'police' => Police.new(),
         'goodend' => Goodend.new(),
         'goodend2' => Goodend2.new()
   }
 
 
   def initialize(start_scene)
     @start_scene = start_scene
   end
 
 
   def next_scene(scene_name)
     val = @@scenes[scene_name]
     return val
   end
 
   def opening_scene()
     return next_scene(@start_scene)
   end
   end

 
 a_map = Map.new('detention')
 a_game = Engine.new(a_map)
 a_game.play()
